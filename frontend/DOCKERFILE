# --- Étape de construction (Build Stage) ---
# Utilise une image Node.js plus récente pour construire l'application React.
# La version 20-alpine est une bonne base légère et plus compatible.
FROM node:20-alpine AS build

# Définit le répertoire de travail dans le conteneur pour cette étape.
WORKDIR /app/frontend

# Installe les dépendances nécessaires pour la compilation sur Alpine Linux.
# Ceci est souvent requis pour des modules natifs ou des outils de build.
RUN apk add --no-cache build-base python3

# Copie package.json et package-lock.json (ou yarn.lock si vous utilisez Yarn).
# Cette étape est placée avant le reste du code pour tirer parti du cache de Docker.
# Si ces fichiers ne changent pas, Docker ne réinstallera pas les dépendances.
COPY package.json package-lock.json ./

# Installe les dépendances du projet.
# Utilisez 'npm install --force' si vous rencontrez des problèmes de dépendances (non recommandé en prod).
RUN npm install

# Copie le reste du code source de l'application React dans le conteneur.
COPY . .

# Exécute la commande de construction de React.
# Cela va créer une version optimisée de votre application dans un dossier 'build' (par default).
RUN npm run build

# --- Étape de service (Serve Stage) ---
# Utilise une image Nginx légère pour servir les fichiers statiques de l'application.
FROM nginx:alpine

# Supprime la configuration Nginx par default.
RUN rm /etc/nginx/conf.d/default.conf

# Copie la configuration Nginx personnalisée que nous allons créer.
# Ce fichier configurera Nginx pour servir votre application React.
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copie les fichiers statiques construits de l'étape précédente (build stage)
# vers le répertoire de service de Nginx.
COPY --from=build /app/frontend/build /usr/share/nginx/html

# Expose le port par default de Nginx (80) pour l'accès web.
EXPOSE 80

# Commande par default pour démarrer Nginx en mode non-daemon (pour que le conteneur reste actif).
CMD ["nginx", "-g", "daemon off;"]
